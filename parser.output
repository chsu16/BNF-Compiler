Terminals unused in grammar

   TOK_FIELDS
   TOK_FIELDDECL
   TOK_BASETYPE
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_IDENTDECL
   TOK_PARAM
   TOK_DECLID
   TOK_VARDECL
   TOK_RETURNVOID
   TOK_NEWSTRING
   TOK_EXPRLIST
   TOK_INDEX
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_POS
   TOK_NEG
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT TOK_IDENT '{' fields '}'

    9 fields: fields fielddecl ';'
   10       | %empty

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT
   12          | basetype TOK_IDENT

   13 basetype: TOK_VOID
   14         | TOK_BOOL
   15         | TOK_CHAR
   16         | TOK_INT
   17         | TOK_STRING
   18         | TOK_IDENT

   19 function: identdecl prototype ')' block

   20 prototype: prototype ',' identdecl
   21          | '(' identdecl
   22          | '('

   23 identdecl: basetype TOK_IDENT
   24          | basetype TOK_ARRAY TOK_IDENT

   25 block: state '}'
   26      | '{' '}'
   27      | ';'

   28 state: state statement
   29      | '{' statement

   30 statement: block
   31          | vardecl
   32          | while
   33          | ifelse
   34          | return
   35          | expr ';'

   36 vardecl: identdecl '=' expr ';'

   37 while: TOK_WHILE '(' expr ')' statement

   38 ifelse: TOK_IF '(' expr ')' statement
   39       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   40 return: TOK_RETURN ';'
   41       | TOK_RETURN expr ';'

   42 expr: binop
   43     | unop
   44     | allocator
   45     | call
   46     | '(' expr ')'
   47     | variable
   48     | constant

   49 binop: expr '=' expr
   50      | expr TOK_EQ expr
   51      | expr TOK_NE expr
   52      | expr TOK_LT expr
   53      | expr TOK_LE expr
   54      | expr TOK_GT expr
   55      | expr TOK_GE expr
   56      | expr '*' expr
   57      | expr '/' expr
   58      | expr '%' expr
   59      | expr '+' expr
   60      | expr '-' expr

   61 unop: '+' expr
   62     | '-' expr
   63     | '!' expr
   64     | TOK_ORD expr
   65     | TOK_CHR expr

   66 allocator: TOK_NEW TOK_IDENT '(' ')'
   67          | TOK_NEW TOK_STRING '(' expr ')'
   68          | TOK_NEW basetype '[' expr ']'

   69 call: TOK_IDENT '(' exprlist ')'

   70 exprlist: exprlist ',' expr
   71         | expr
   72         | %empty

   73 variable: TOK_IDENT
   74         | expr '[' expr ']'
   75         | expr '.' TOK_IDENT

   76 constant: TOK_INTCON
   77         | TOK_CHARCON
   78         | TOK_STRINGCON
   79         | TOK_FALSE
   80         | TOK_TRUE
   81         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 63
'%' (37) 58
'(' (40) 21 22 37 38 39 46 66 67 69
')' (41) 19 37 38 39 46 66 67 69
'*' (42) 56
'+' (43) 59 61
',' (44) 20 70
'-' (45) 60 62
'.' (46) 75
'/' (47) 57
';' (59) 6 9 27 35 36 40 41
'=' (61) 36 49
'[' (91) 68 74
']' (93) 68 74
'{' (123) 8 26 29
'}' (125) 5 8 25 26
error (256) 5 6
TOK_VOID (258) 13
TOK_BOOL (259) 14
TOK_CHAR (260) 15
TOK_INT (261) 16
TOK_STRING (262) 17 67
TOK_IF (263) 38 39
TOK_ELSE (264) 39
TOK_WHILE (265) 37
TOK_RETURN (266) 40 41
TOK_STRUCT (267) 8
TOK_FALSE (268) 79
TOK_TRUE (269) 80
TOK_NULL (270) 81
TOK_NEW (271) 66 67 68
TOK_ARRAY (272) 11 24
TOK_EQ (273) 50
TOK_NE (274) 51
TOK_LT (275) 52
TOK_LE (276) 53
TOK_GT (277) 54
TOK_GE (278) 55
TOK_IDENT (279) 8 11 12 18 23 24 66 69 73 75
TOK_INTCON (280) 76
TOK_CHARCON (281) 77
TOK_STRINGCON (282) 78
TOK_FIELDS (283)
TOK_FIELDDECL (284)
TOK_BASETYPE (285)
TOK_FUNCTION (286)
TOK_PROTOTYPE (287)
TOK_IDENTDECL (288)
TOK_PARAM (289)
TOK_DECLID (290)
TOK_VARDECL (291)
TOK_RETURNVOID (292)
TOK_NEWSTRING (293)
TOK_EXPRLIST (294)
TOK_INDEX (295)
TOK_BLOCK (296)
TOK_CALL (297)
TOK_IFELSE (298)
TOK_INITDECL (299)
TOK_POS (300)
TOK_NEG (301)
TOK_NEWARRAY (302)
TOK_TYPEID (303)
TOK_FIELD (304)
TOK_ORD (305) 64
TOK_CHR (306) 65
TOK_ROOT (307)


Nonterminals, with rules where they appear

$accept (69)
    on left: 0
start (70)
    on left: 1, on right: 0
program (71)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (72)
    on left: 8, on right: 2
fields (73)
    on left: 9 10, on right: 8 9
fielddecl (74)
    on left: 11 12, on right: 9
basetype (75)
    on left: 13 14 15 16 17 18, on right: 11 12 23 24 68
function (76)
    on left: 19, on right: 3
prototype (77)
    on left: 20 21 22, on right: 19 20
identdecl (78)
    on left: 23 24, on right: 19 20 21 36
block (79)
    on left: 25 26 27, on right: 19 30
state (80)
    on left: 28 29, on right: 25 28
statement (81)
    on left: 30 31 32 33 34 35, on right: 4 28 29 37 38 39
vardecl (82)
    on left: 36, on right: 31
while (83)
    on left: 37, on right: 32
ifelse (84)
    on left: 38 39, on right: 33
return (85)
    on left: 40 41, on right: 34
expr (86)
    on left: 42 43 44 45 46 47 48, on right: 35 36 37 38 39 41 46 49
    50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 70 71 74
    75
binop (87)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60, on right: 42
unop (88)
    on left: 61 62 63 64 65, on right: 43
allocator (89)
    on left: 66 67 68, on right: 44
call (90)
    on left: 69, on right: 45
exprlist (91)
    on left: 70 71 72, on right: 69 70
variable (92)
    on left: 73 74 75, on right: 47
constant (93)
    on left: 76 77 78 79 80 81, on right: 48


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_STRUCT     shift, and go to state 13
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef  go to state 30
    basetype   go to state 31
    function   go to state 32
    identdecl  go to state 33
    block      go to state 34
    state      go to state 35
    statement  go to state 36
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 48
    ';'  shift, and go to state 49


State 5

   13 basetype: TOK_VOID .

    $default  reduce using rule 13 (basetype)


State 6

   14 basetype: TOK_BOOL .

    $default  reduce using rule 14 (basetype)


State 7

   15 basetype: TOK_CHAR .

    $default  reduce using rule 15 (basetype)


State 8

   16 basetype: TOK_INT .

    $default  reduce using rule 16 (basetype)


State 9

   17 basetype: TOK_STRING .

    $default  reduce using rule 17 (basetype)


State 10

   38 ifelse: TOK_IF . '(' expr ')' statement
   39       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 50


State 11

   37 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 51


State 12

   40 return: TOK_RETURN . ';'
   41       | TOK_RETURN . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 53

    expr       go to state 54
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 13

    8 structdef: TOK_STRUCT . TOK_IDENT '{' fields '}'

    TOK_IDENT  shift, and go to state 55


State 14

   79 constant: TOK_FALSE .

    $default  reduce using rule 79 (constant)


State 15

   80 constant: TOK_TRUE .

    $default  reduce using rule 80 (constant)


State 16

   81 constant: TOK_NULL .

    $default  reduce using rule 81 (constant)


State 17

   66 allocator: TOK_NEW . TOK_IDENT '(' ')'
   67          | TOK_NEW . TOK_STRING '(' expr ')'
   68          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 56
    TOK_IDENT   shift, and go to state 57

    basetype  go to state 58


State 18

   18 basetype: TOK_IDENT .
   69 call: TOK_IDENT . '(' exprlist ')'
   73 variable: TOK_IDENT .

    '('  shift, and go to state 59

    TOK_ARRAY  reduce using rule 18 (basetype)
    TOK_IDENT  reduce using rule 18 (basetype)
    $default   reduce using rule 73 (variable)


State 19

   76 constant: TOK_INTCON .

    $default  reduce using rule 76 (constant)


State 20

   77 constant: TOK_CHARCON .

    $default  reduce using rule 77 (constant)


State 21

   78 constant: TOK_STRINGCON .

    $default  reduce using rule 78 (constant)


State 22

   64 unop: TOK_ORD . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 60
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 23

   65 unop: TOK_CHR . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 61
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 24

   61 unop: '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 62
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 25

   62 unop: '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 63
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 26

   63 unop: '!' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 64
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 27

   46 expr: '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 65
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 28

   27 block: ';' .

    $default  reduce using rule 27 (block)


State 29

   26 block: '{' . '}'
   29 state: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 66
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 67
    block      go to state 34
    state      go to state 35
    statement  go to state 68
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 31

   23 identdecl: basetype . TOK_IDENT
   24          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 69
    TOK_IDENT  shift, and go to state 70


State 32

    3 program: program function .

    $default  reduce using rule 3 (program)


State 33

   19 function: identdecl . prototype ')' block
   36 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 71
    '('  shift, and go to state 72

    prototype  go to state 73


State 34

   30 statement: block .

    $default  reduce using rule 30 (statement)


State 35

   25 block: state . '}'
   28 state: state . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 74
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 67
    block      go to state 34
    state      go to state 35
    statement  go to state 75
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 36

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 37

   31 statement: vardecl .

    $default  reduce using rule 31 (statement)


State 38

   32 statement: while .

    $default  reduce using rule 32 (statement)


State 39

   33 statement: ifelse .

    $default  reduce using rule 33 (statement)


State 40

   34 statement: return .

    $default  reduce using rule 34 (statement)


State 41

   35 statement: expr . ';'
   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    '.'     shift, and go to state 89
    ';'     shift, and go to state 90


State 42

   42 expr: binop .

    $default  reduce using rule 42 (expr)


State 43

   43 expr: unop .

    $default  reduce using rule 43 (expr)


State 44

   44 expr: allocator .

    $default  reduce using rule 44 (expr)


State 45

   45 expr: call .

    $default  reduce using rule 45 (expr)


State 46

   47 expr: variable .

    $default  reduce using rule 47 (expr)


State 47

   48 expr: constant .

    $default  reduce using rule 48 (expr)


State 48

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 49

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 50

   38 ifelse: TOK_IF '(' . expr ')' statement
   39       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 91
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 51

   37 while: TOK_WHILE '(' . expr ')' statement

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 92
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 52

   69 call: TOK_IDENT . '(' exprlist ')'
   73 variable: TOK_IDENT .

    '('  shift, and go to state 59

    $default  reduce using rule 73 (variable)


State 53

   40 return: TOK_RETURN ';' .

    $default  reduce using rule 40 (return)


State 54

   41 return: TOK_RETURN expr . ';'
   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    '.'     shift, and go to state 89
    ';'     shift, and go to state 93


State 55

    8 structdef: TOK_STRUCT TOK_IDENT . '{' fields '}'

    '{'  shift, and go to state 94


State 56

   17 basetype: TOK_STRING .
   67 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 95

    $default  reduce using rule 17 (basetype)


State 57

   18 basetype: TOK_IDENT .
   66 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 96

    $default  reduce using rule 18 (basetype)


State 58

   68 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 97


State 59

   69 call: TOK_IDENT '(' . exprlist ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    $default  reduce using rule 72 (exprlist)

    expr       go to state 98
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    exprlist   go to state 99
    variable   go to state 46
    constant   go to state 47


State 60

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   64 unop: TOK_ORD expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 64 (unop)


State 61

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   65 unop: TOK_CHR expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 65 (unop)


State 62

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   61 unop: '+' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 85
    '/'  shift, and go to state 86
    '%'  shift, and go to state 87
    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 61 (unop)


State 63

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   62 unop: '-' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 85
    '/'  shift, and go to state 86
    '%'  shift, and go to state 87
    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 62 (unop)


State 64

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   63 unop: '!' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 63 (unop)


State 65

   46 expr: '(' expr . ')'
   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    '.'     shift, and go to state 89
    ')'     shift, and go to state 100


State 66

   26 block: '{' '}' .

    $default  reduce using rule 26 (block)


State 67

   36 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 71


State 68

   29 state: '{' statement .

    $default  reduce using rule 29 (state)


State 69

   24 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 101


State 70

   23 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 23 (identdecl)


State 71

   36 vardecl: identdecl '=' . expr ';'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 102
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 72

   21 prototype: '(' . identdecl
   22          | '(' .

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 103

    $default  reduce using rule 22 (prototype)

    basetype   go to state 31
    identdecl  go to state 104


State 73

   19 function: identdecl prototype . ')' block
   20 prototype: prototype . ',' identdecl

    ')'  shift, and go to state 105
    ','  shift, and go to state 106


State 74

   25 block: state '}' .

    $default  reduce using rule 25 (block)


State 75

   28 state: state statement .

    $default  reduce using rule 28 (state)


State 76

   50 binop: expr TOK_EQ . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 107
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 77

   51 binop: expr TOK_NE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 108
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 78

   52 binop: expr TOK_LT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 109
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 79

   53 binop: expr TOK_LE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 110
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 80

   54 binop: expr TOK_GT . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 111
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 81

   55 binop: expr TOK_GE . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 112
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 82

   49 binop: expr '=' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 113
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 83

   59 binop: expr '+' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 114
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 84

   60 binop: expr '-' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 115
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 85

   56 binop: expr '*' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 116
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 86

   57 binop: expr '/' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 117
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 87

   58 binop: expr '%' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 118
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 88

   74 variable: expr '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 119
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 89

   75 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 120


State 90

   35 statement: expr ';' .

    $default  reduce using rule 35 (statement)


State 91

   38 ifelse: TOK_IF '(' expr . ')' statement
   39       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    '.'     shift, and go to state 89
    ')'     shift, and go to state 121


State 92

   37 while: TOK_WHILE '(' expr . ')' statement
   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    '.'     shift, and go to state 89
    ')'     shift, and go to state 122


State 93

   41 return: TOK_RETURN expr ';' .

    $default  reduce using rule 41 (return)


State 94

    8 structdef: TOK_STRUCT TOK_IDENT '{' . fields '}'

    $default  reduce using rule 10 (fields)

    fields  go to state 123


State 95

   67 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 124
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 96

   66 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 125


State 97

   68 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 126
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 98

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   71 exprlist: expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    '.'     shift, and go to state 89

    $default  reduce using rule 71 (exprlist)


State 99

   69 call: TOK_IDENT '(' exprlist . ')'
   70 exprlist: exprlist . ',' expr

    ')'  shift, and go to state 127
    ','  shift, and go to state 128


State 100

   46 expr: '(' expr ')' .

    $default  reduce using rule 46 (expr)


State 101

   24 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 24 (identdecl)


State 102

   36 vardecl: identdecl '=' expr . ';'
   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    '.'     shift, and go to state 89
    ';'     shift, and go to state 129


State 103

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


State 104

   21 prototype: '(' identdecl .

    $default  reduce using rule 21 (prototype)


State 105

   19 function: identdecl prototype ')' . block

    ';'  shift, and go to state 28
    '{'  shift, and go to state 29

    block  go to state 130
    state  go to state 35


State 106

   20 prototype: prototype ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 103

    basetype   go to state 31
    identdecl  go to state 131


State 107

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   50      | expr TOK_EQ expr .
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 83
    '-'  shift, and go to state 84
    '*'  shift, and go to state 85
    '/'  shift, and go to state 86
    '%'  shift, and go to state 87
    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 50 (binop)


State 108

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   51      | expr TOK_NE expr .
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 83
    '-'  shift, and go to state 84
    '*'  shift, and go to state 85
    '/'  shift, and go to state 86
    '%'  shift, and go to state 87
    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 51 (binop)


State 109

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   52      | expr TOK_LT expr .
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 83
    '-'  shift, and go to state 84
    '*'  shift, and go to state 85
    '/'  shift, and go to state 86
    '%'  shift, and go to state 87
    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 52 (binop)


State 110

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   53      | expr TOK_LE expr .
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 83
    '-'  shift, and go to state 84
    '*'  shift, and go to state 85
    '/'  shift, and go to state 86
    '%'  shift, and go to state 87
    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 53 (binop)


State 111

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   54      | expr TOK_GT expr .
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 83
    '-'  shift, and go to state 84
    '*'  shift, and go to state 85
    '/'  shift, and go to state 86
    '%'  shift, and go to state 87
    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 54 (binop)


State 112

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   55      | expr TOK_GE expr .
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 83
    '-'  shift, and go to state 84
    '*'  shift, and go to state 85
    '/'  shift, and go to state 86
    '%'  shift, and go to state 87
    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 55 (binop)


State 113

   49 binop: expr . '=' expr
   49      | expr '=' expr .
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    '.'     shift, and go to state 89

    $default  reduce using rule 49 (binop)


State 114

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   59      | expr '+' expr .
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 85
    '/'  shift, and go to state 86
    '%'  shift, and go to state 87
    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 59 (binop)


State 115

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   60      | expr '-' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 85
    '/'  shift, and go to state 86
    '%'  shift, and go to state 87
    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 60 (binop)


State 116

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   56      | expr '*' expr .
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 56 (binop)


State 117

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   57      | expr '/' expr .
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 57 (binop)


State 118

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   58      | expr '%' expr .
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    '['  shift, and go to state 88
    '.'  shift, and go to state 89

    $default  reduce using rule 58 (binop)


State 119

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   74 variable: expr . '[' expr ']'
   74         | expr '[' expr . ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    ']'     shift, and go to state 132
    '.'     shift, and go to state 89


State 120

   75 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 75 (variable)


State 121

   38 ifelse: TOK_IF '(' expr ')' . statement
   39       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 67
    block      go to state 34
    state      go to state 35
    statement  go to state 133
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 122

   37 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 67
    block      go to state 34
    state      go to state 35
    statement  go to state 134
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 123

    8 structdef: TOK_STRUCT TOK_IDENT '{' fields . '}'
    9 fields: fields . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_BOOL    shift, and go to state 6
    TOK_CHAR    shift, and go to state 7
    TOK_INT     shift, and go to state 8
    TOK_STRING  shift, and go to state 9
    TOK_IDENT   shift, and go to state 103
    '}'         shift, and go to state 135

    fielddecl  go to state 136
    basetype   go to state 137


State 124

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   67 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    '.'     shift, and go to state 89
    ')'     shift, and go to state 138


State 125

   66 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 66 (allocator)


State 126

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   68 allocator: TOK_NEW basetype '[' expr . ']'
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    ']'     shift, and go to state 139
    '.'     shift, and go to state 89


State 127

   69 call: TOK_IDENT '(' exprlist ')' .

    $default  reduce using rule 69 (call)


State 128

   70 exprlist: exprlist ',' . expr

    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 52
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 140
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 129

   36 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 36 (vardecl)


State 130

   19 function: identdecl prototype ')' block .

    $default  reduce using rule 19 (function)


State 131

   20 prototype: prototype ',' identdecl .

    $default  reduce using rule 20 (prototype)


State 132

   74 variable: expr '[' expr ']' .

    $default  reduce using rule 74 (variable)


State 133

   38 ifelse: TOK_IF '(' expr ')' statement .
   39       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 141

    $default  reduce using rule 38 (ifelse)


State 134

   37 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 37 (while)


State 135

    8 structdef: TOK_STRUCT TOK_IDENT '{' fields '}' .

    $default  reduce using rule 8 (structdef)


State 136

    9 fields: fields fielddecl . ';'

    ';'  shift, and go to state 142


State 137

   11 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   12          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 143
    TOK_IDENT  shift, and go to state 144


State 138

   67 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 67 (allocator)


State 139

   68 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 68 (allocator)


State 140

   49 binop: expr . '=' expr
   50      | expr . TOK_EQ expr
   51      | expr . TOK_NE expr
   52      | expr . TOK_LT expr
   53      | expr . TOK_LE expr
   54      | expr . TOK_GT expr
   55      | expr . TOK_GE expr
   56      | expr . '*' expr
   57      | expr . '/' expr
   58      | expr . '%' expr
   59      | expr . '+' expr
   60      | expr . '-' expr
   70 exprlist: exprlist ',' expr .
   74 variable: expr . '[' expr ']'
   75         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 76
    TOK_NE  shift, and go to state 77
    TOK_LT  shift, and go to state 78
    TOK_LE  shift, and go to state 79
    TOK_GT  shift, and go to state 80
    TOK_GE  shift, and go to state 81
    '='     shift, and go to state 82
    '+'     shift, and go to state 83
    '-'     shift, and go to state 84
    '*'     shift, and go to state 85
    '/'     shift, and go to state 86
    '%'     shift, and go to state 87
    '['     shift, and go to state 88
    '.'     shift, and go to state 89

    $default  reduce using rule 70 (exprlist)


State 141

   39 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_BOOL       shift, and go to state 6
    TOK_CHAR       shift, and go to state 7
    TOK_INT        shift, and go to state 8
    TOK_STRING     shift, and go to state 9
    TOK_IF         shift, and go to state 10
    TOK_WHILE      shift, and go to state 11
    TOK_RETURN     shift, and go to state 12
    TOK_FALSE      shift, and go to state 14
    TOK_TRUE       shift, and go to state 15
    TOK_NULL       shift, and go to state 16
    TOK_NEW        shift, and go to state 17
    TOK_IDENT      shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    TOK_ORD        shift, and go to state 22
    TOK_CHR        shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 67
    block      go to state 34
    state      go to state 35
    statement  go to state 145
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    binop      go to state 42
    unop       go to state 43
    allocator  go to state 44
    call       go to state 45
    variable   go to state 46
    constant   go to state 47


State 142

    9 fields: fields fielddecl ';' .

    $default  reduce using rule 9 (fields)


State 143

   11 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 146


State 144

   12 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 145

   39 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 39 (ifelse)


State 146

   11 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 11 (fielddecl)
